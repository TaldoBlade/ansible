ANSIBLE
Lecture 1 - Introduction
The main purpose of Ansible is to provision servers
	We want to automate the process of configuring hosts
	Ansible Control Host > It's basically a Ansible server
		The ACH will make connections to the hosts via SSH
			So the hosts don't need an Ansible agent running or installed
	There isn't one way to use it
		But there are best practices
			It's doesn't require an ACH to function, for example
				You could just use a Laptop with the scripts of play book
				Or maybe put the script/playbook in a git repo so other computers can change certain parts of the code
Lecture 2 - SSH Overview & Setup
Ansible uses SSH(OpenSSH) to do it's provisioning
	OpenSSH Server in every host is REQUIRED for Ansible to work
		It's good to connect to each server using the ACH to answer the inicial "yes" prompt (Can be automated with Terraform?)
			But there's a way to make Ansible automatic accept it
	It's good practice to use a SSH key pair
		A key makes it harder to someone to break
		Use the command 'ssh-keygen -t ed25519 -C "My first key"' to generate a key
			-t option makes possible to select the type of the key
			-C option makes it possible to leave a comment in the key
			You can select a passphrase to the key to make it more secure
			It'll create two keys in the .ssh directory in $HOME
				A private key, which you should never show anybody
				A public key which is meant to be sent abroad
		To add the key to the ssh server use the command 'ssh-copy-id -i ~/.ssh/id_ed25519.pub ip'
			The -i option indicates the directory of the file
		You can use the 'ssh-add' command to add the pass phrase to the SSH agent, and not have to type it again
Lecture 3 - Setting up a Git Repository
Create a public repo in Github and add your public ssh key pair to it
	Use the command 'git clone git@github.com:TaldoBlade/ansible.git' to get it locally in your machine
	Use the command 'git config --global user.name "TaldoBlade" to config your user in local git
	Use the command 'git config --global user.email "rafaelcbarbosa97@gmail.com"
		You can check what's configured reading the file '~/.gitconfig'
		This configuration is necessary for commiting changes to the repo
	git status going to list the changes
	git diff FILE to show what files have changed
	git add FILE > Take the changes of the files to commit it
	git commit -m "updated read me file"
	git push
Lecture 4 - Running ad-hoc Commands
Now we need to install Ansible in the AHC
	sudo apt update && sudo apt install ansible
Create an inventory file that contains all the IP addresses of the hosts we're managing using Ansible
	vim inventory
		add the ip addresses. One per line
	git add inventory > git commit > git push
	'ansible all --key-file ~/.ssh/ansible -i inventory -m ping' to test if it's working
		ansible all > runs the command against all hosts listed in the inventory
		--key-file > specify the ssh key you want to use
		-i inventory > specifies the inventory. In this case a local file called inventory
		-m ping > specifies to use the module ping
Create a config file, so you don't need to specify the inventory and ssh key everytime you use a command
	vim ansible.cfg
		Add the tag [defaults] first
		Add 'inventory = ~/ansible/inventory' to specify the inventory you want to use
		Add 'private_key_file = ~/.ssh/ansible' to specify the private key file
'ansible all --list-hosts' > Lists all the current hosts
'ansible all -m gather_facts' > Gather facts about the hosts
	use the '--limit 192.168.1.64' option to only gather facts about one host
Lecture 5 - Running elevated ad-hoc
'ansible all -m apt -a update_cache=true'
	The '-a' option grants the hability to give an argument alongside the module we're using
	This is a command similar to 'sudo apt update'
		It's not going to work now because Ansible doesn't have root privileges
			To fix that you can use the '--become --ask-become-pass' options in the command above
	docs.ansible.com/ansible/latest/modules/apt_module.html > Learn more in the documentation
'ansible all -m apt -a name=vim-nox --become --ask-become-pass'
	This command is installing the vim-nox package using the '-a name=vim-nox' argument
		You can check if it worked by reading the var/log/apt/history.log in which server
'ansible all -m apt -a "name=snapd state=latest" --become --ask-become-pass'
	we use the 'name=snapd state=lastest' argument to tell ansible to use the apt module and update the packet snapd
'ansible all -m apt -a "upgrade=dist" --become --ask-become-pass'
	use the 'upgrade=dist' argument to upgrade all the packages
Lecture 6 - Writing our first Playbook
With a playbook we can define what state we want our servers to be in
	YAML is the default language used to write playbooks
	To run a playbook use the 'ansible-playbook --ask-become-pass install_apache.yml'
	Start the file with '---' and then a blank space underneat(Spaces are very important in yaml)
	Then define the hosts, in this case 'hosts: all' and 'become: true' to run as root
	'tasks:' to signal the tasks you want do to with the playbook
		'- name: update repository' to set a new task and give it a name
		'apt:' selects the module you're using
			'update_cache: yes' gives an argument to run with the module
	Example of installing apache:
		- name: install apache2 package
		  apt:
		    name: apache
		    state:latest
		You could remove this package by changing the state
			'state: absent'
Lecture 7 - The 'when' Conditional
Differente playbook by the distro the host is using
It's important to use 'git use' before starting to make changes to the files.
	This is to make sure your working with the up-to-date repository
Sometimes you're gonna work with servers running different distros
	You can use the command 'cat /etc/os-release' to see which distro the server is running
	So when you run the apt module, for exemple, in a red hat based distro it's going to fail
		To fix this you can use a when condition in the playbook file, like this:
			- name: update repository index
			  apt:
			    update_cache: yes
		          when: ansible_distribution == "Ubuntu"
		
			Using this we can use the variable 'ansible_distribution' to chech if the distro is Ubuntu.
				You could also use 'when: ansible_distribution in ["Debian", "Ubuntu"]' to specify multiple distros
				Use multiple variables 'ansible_distribution == "CentOS" and ansible_distribution_version == "22.04"'
		 	You can get the variables using the 'ansible all -m gather_facts --limit 192.168.1.64'

